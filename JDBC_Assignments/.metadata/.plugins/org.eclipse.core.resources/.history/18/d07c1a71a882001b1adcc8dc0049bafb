package com.demo.playerdao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import com.demo.dbutil.PostgresConnection;
import com.demo.model.Player;
import com.demo.playerdao.PlayerDAO;

public class PlayerDAOImpl implements PlayerDAO {

	@Override
	public int addPlayer(Player player) {

		
		int c=0;
		//try with resources available from java 1.7 and above
		//this block doesnt require finally to release the connection, the jvm will take care of releasing the connection
		try(Connection connection=PostgresConnection.getConnection()){
			String sql = "insert into player_schema.player(id,name,age,city,gender) values(?,?,?,?,?)";
			PreparedStatement preparedStatement=connection.prepareStatement(sql);
			preparedStatement.setInt(1, player.getId());
			preparedStatement.setString(2, player.getName());
			preparedStatement.setInt(3, player.getAge());
			preparedStatement.setString(4, player.getCity());
			preparedStatement.setString(5, player.getGender());
			c=preparedStatement.executeUpdate();
		} catch (ClassNotFoundException | SQLException e) {
			System.out.println(e);
		}
		
		return c;
	}

	@Override
	public int updatePlayerCity(int id, String newCity) {
		
		int u=0;
		try(Connection connection=PostgresConnection.getConnection()){
			String sql = "update player_schema.player set city=? where id=?" ;
			PreparedStatement preparedStatement=connection.prepareStatement(sql);
			preparedStatement.setString(1, newCity);
			preparedStatement.setInt(2, id);
			u=preparedStatement.executeUpdate();
		} catch (ClassNotFoundException | SQLException e) {
			System.out.println(e);
		}
		
		return u;
	}

	@Override
	public int deletePlayer(int id) {
	
		return 0;
	}

	@Override
	public Player getPlayerById(int id) {
		Player player = null;
		try(Connection connection=PostgresConnection.getConnection()){
			String sql = "select id,name,age,city,gender from player_schema.player where id=?;";
			PreparedStatement preparedStatement=connection.prepareStatement(sql);
			preparedStatement.setInt(1, id);
			
			ResultSet resultSet=preparedStatement.executeQuery();
			if(resultSet.next()) {
				player=new Player();
				player.setId(id);
				player.setAge(resultSet.getInt("age"));
				player.setCity(resultSet.getString("city"));
				player.setGender(resultSet.getString("gender"));
				player.setName(resultSet.getString("name"));
			}
			
		} catch (ClassNotFoundException | SQLException e) {
			System.out.println(e);
		}
		return player;
	}

	@Override
	public List<Player> getAllPlayers() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Player> getAllPlayersByAge(int age) {
		// TODO Auto-generated method stub
		return null;
	}

}
